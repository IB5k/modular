{
 :components
 [
  ;; lein new modular app +httpkit
  ;; lein new modular app +httpkit:80 ; because there's only one possible option in this case
  ;; lein new modular app +httpkit:port:80
  {:component :http-kit
   :dependencies [#_[juxt.modular/http-kit "0.5.0-SNAPSHOT"]]
   :constructor modular.http-kit/new-webserver
   :options [:port]
   :key :webserver
   }

  {:component :webrouter
   :dependencies [#_[juxt.modular/bidi "0.5.0-SNAPSHOT"]]
   :constructor modular.bidi/new-router
   }

  {:component :webresources
   :dependencies [#_[juxt.modular/bidi "0.5.0-SNAPSHOT"]]
   :constructor modular.bidi/new-web-service
   :requires bidi.bidi/->ResourcesMaybe
   :args [:request-handlers {}
          :routes ["/" {"js/" (->ResourcesMaybe {:prefix "public/js/"})
                        "css/" (->ResourcesMaybe {:prefix "public/css/"})}]]}

  {:component :webmeta
   :dependencies [#_[juxt.modular/bidi "0.5.0-SNAPSHOT"]]
   :constructor modular.template/new-static-template-data
   :args [:title "{{name}}"]
   }

  {:component :cljs-builder
   :dependencies [[juxt.modular/cljs "0.4.0"]]
   :constructor modular.cljs/new-cljs-builder
   :args [:id :default :source-path "src-cljs"]
   }

  {:component :cljs-core
   :dependencies [#_[juxt.modular/cljs "0.5.0"]
                  ;; temporary while working on modular cljs
                  [thheller/shadow-build "0.5.0" :exclusions [org.clojure/clojurescript]]
                  [org.clojure/clojurescript "0.0-2202"]
                  [com.google.javascript/closure-compiler "v20131014"]
                  [org.clojure/google-closure-library "0.0-20140226-71326067"]
                  [org.clojure/google-closure-library-third-party "0.0-20140226-71326067"]]
   :constructor modular.cljs/new-cljs-module
   :args [:name :cljs-core :mains ['cljs.core] :dependencies #{}]
   }

  ;; Menus
  {:component :menu-index
   :dependencies [#_[juxt.modular/menu "0.5.0-SNAPSHOT"]]
   :constructor modular.menu/new-menu-index}

  {:component :bootstrap-menu
   :dependencies [#_[juxt.modular/menu "0.5.0-SNAPSHOT"]]
   :constructor modular.menu/new-bootstrap-menu}

  ;; Security components
  {:component :cylon/login-form
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.login-form/new-login-form
   :key :cylon/login-form
   }

  {:component :cylon/atom-backed-session-store
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.session/new-atom-backed-session-store
   :key :cylon/session-store
   }

  {:component :cylon/default-user-domain
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.user/new-default-user-domain
   :key :cylon/user-domain
   }

  {:component :cylon/pbkdf2-password-hash
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.pbkdf2/new-pbkdf2-password-hash
   :key :cylon/password-hash-algo
   }

  {:component :cylon/user-file
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.user/new-user-file
   :args [:file (io/file (System/getProperty "user.home") ".{{name}}-users.edn")]
   :key :cylon/user-store
   }

  {:component :authorizer
   :dependencies [#_[cylon "0.2.0"]]
   :constructor cylon.impl.authorization/new-logged-in-authorizer
   }

  ;; Project-local components
  {:component :{{name}}-website
   :dependencies [
                  [hiccup "1.0.5"]
                  [liberator "0.11.0" :exclusions [hiccup]]

                  #_[juxt.modular/bidi "0.4.0"]
                  ;; temporary while working on modular bidi
                  [bidi "1.10.3"]
                  [prismatic/schema "0.2.1"]
                  [prismatic/plumbing "0.2.2"]

                  ]
   :constructor {{name}}.website/new-website
   }

  {:component :{{name}}-template-model
   :dependencies [#_[juxt.modular/web-template "0.5.0"]
                  [de.ubercode.clostache/clostache "1.3.1"]]
   :constructor modular.web-template/new-system-dynamic-template-model
   :args [:systemref systemref]
   }

  {:component :{{name}}-cljs
   :dependencies [#_[juxt.modular/cljs "0.5.0"]]
   :constructor modular.cljs/new-cljs-module
   :args [:name :{{name}} :mains ['{{name}}.main] :dependencies #{:cljs-core}]
   }

  {:component :example-page-a
   :constructor {{name}}.example-page/new-example-page
   :args [:label "First example page"
          :order \A
          :content "Example page (A) generated by modular"
          ]}

  {:component :example-page-b
   :constructor {{name}}.example-page/new-example-page
   :args [:label "Second example page"
          :order \B
          :content "Example page (B) generated by modular"]}

  {:component :restricted-page
   :constructor {{name}}.restricted-page/new-restricted-page}
  ]

 :assemblies
 [
  ;; lein new modular app full-featured-website
  {:assembly :website
   :components #{:http-kit
                 :webrouter
                 :webresources
                 :menu-index
                 :{{name}}-website
                 :{{name}}-template-model}
   :dependency-map {:webserver {:request-handler :webrouter}
                    :webrouter [:{{name}}-website #_:cljs-builder :webresources]
                    :{{name}}-website {:template-model :{{name}}-template-model}
                    :menu-index [:example-page-a :example-page-b]
                    }
   :default? true}

  {:assembly :example-pages
   :components #{:example-page-a :example-page-b}
   :dependency-map {:webrouter [:example-page-a :example-page-b]
                    :example-page-a {:template-model :{{name}}-template-model}
                    :example-page-b {:template-model :{{name}}-template-model}}
   :default? true}

  {:assembly :webmeta
   :components #{:webmeta}
   :default? true}

  {:assembly :cljs
   :components #{:cljs-builder :cljs-core :{{name}}-cljs}
   :dependency-map {:cljs-builder [:cljs-core :{{name}}-cljs]}
   :default? false}

  {:assembly :website-security
   :components #{:cylon/login-form
                 :cylon/atom-backed-session-store
                 :cylon/default-user-domain
                 :cylon/pbkdf2-password-hash
                 :cylon/user-file
                 :restricted-page
                 :authorizer}
   :dependency-map {:webrouter [:cylon/login-form
                                :restricted-page],
                    :cylon/login-form
                    {:session-store :cylon/session-store,
                     ;; TODO Cylon should 'use' :cylon/* keywords
                     :user-domain :cylon/user-domain
                     },
                    :cylon/user-domain
                    {:password-hash-algo :cylon/password-hash-algo
                     :user-store :cylon/user-store},
                    :menu-index [:restricted-page]}
   :default? false
   }

  {:assembly :bootstrap
   :components #{:bootstrap-menu}
   :default? true}

  {:assembly :dev-browser
   :components #{}
   :dependency-map {}
   :default? true}

  ]}
