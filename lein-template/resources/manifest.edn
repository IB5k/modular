{
 :components
 [
  {:component :modular.http-kit/webserver
   :library-dependencies [[juxt.modular/http-kit "0.5.1"]]
   :constructor modular.http-kit/new-webserver
   :options [:port]
   :using [:request-handler]
   }

  {:component :modular.bidi/router
   :library-dependencies [[juxt.modular/bidi "0.5.4"]]
   :constructor modular.bidi/new-router
   }

  {:component :modular.template/aggregate-template-model
   :library-dependencies [[juxt.modular/template "0.6.0"]]
   :constructor modular.template/new-aggregate-template-model
   }

  {:component :modular.clostache/templater
   :library-dependencies [[juxt.modular/clostache "0.6.0"]]
   :constructor modular.clostache/new-clostache-templater
   }

  {:component :modular.template/static-template-model
   :library-dependencies [[juxt.modular/template "0.6.0"]]
   :constructor modular.template/new-static-template-model
   }

  {:component :modular.bidi/static-resource-service
   :library-dependencies [[juxt.modular/bidi "0.5.4"]]
   :constructor modular.bidi/new-static-resource-service
   }

  #_{:component :modular.bidi/web-service
     :library-dependencies [[juxt.modular/bidi "0.5.4"]]
     :constructor modular.bidi/new-web-service}

  #_{:component :webresources
     :library-dependencies [[juxt.modular/bidi "0.5.4"]]
     :constructor modular.bidi/new-web-service
     :refers [bidi.bidi/->ResourcesMaybe]
     ;; TODO The args should belong to the instance
     :args [:request-handlers {}
            :routes ["/" {"js/" (->ResourcesMaybe {:prefix "public/js/"})
                          "css/" (->ResourcesMaybe {:prefix "public/css/"})}]]}

  #_{:component :webmeta
     :library-dependencies [[juxt.modular/bidi "0.5.4"]]
     :constructor modular.template/new-static-template-data
     ;; TODO The args should belong to the instance
     :args [:title "{{name}}"]
     }

  #_{:component :cljs-builder
     :library-dependencies [[juxt.modular/cljs "0.4.0"]]
     :constructor modular.cljs/new-cljs-builder
     ;; TODO The args should belong to the instance
     :args [:id :default :source-path "src-cljs"]
     }

  #_{:component :cljs-core
     :library-dependencies [[juxt.modular/cljs "0.5.0"]]
     :constructor modular.cljs/new-cljs-module
     ;; TODO The args should belong to the instance
     :args [:name :cljs-core :mains ['cljs.core] :dependencies #{}]
     }

  ;; Menus
  #_{:component :modular.menu/menu-index
     :library-dependencies [[juxt.modular/menu "0.5.3"]]
     :constructor modular.menu/new-menu-index}

  #_{:component :bootstrap-menu
     :library-dependencies [[juxt.modular/bootstrap "0.2.0"]]
     :constructor modular.bootstrap.menu/new-bootstrap-menu}

  ;; Security components
  #_{:component :cylon/login-form
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.authentication/new-authentication-login-form
     }

  #_{:component :login-form-menu-items
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]
                            [juxt.modular/menu "0.5.3"]]
     :constructor modular.menu.cylon/new-login-form-menu-items
     }

  #_{:component :cylon/login-form-bootstrap-renderer
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]
                            [juxt.modular/bootstrap "0.2.0"]]
     :constructor modular.bootstrap.cylon.login-form/new-bootstrap-login-form-renderer
     }

  #_{:component :boilerplate
     :library-dependencies [[juxt.modular/bootstrap "0.2.0"]]
     :constructor {{name}}.boilerplate/new-boilerplate
     }

  #_{:component :cylon/atom-backed-session-store
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.session/new-atom-backed-session-store
     :args [:expiry-seconds 3600 :id :login]
     }

  #_{:component :cylon/default-user-domain
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.user/new-default-user-domain
     }

  #_{:component :cylon/pbkdf2-password-hash
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.pbkdf2/new-pbkdf2-password-hash
     }

  #_{:component :cylon/user-file
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.user/new-user-file
     ;; TODO The args should belong to the instance
     :args [:file (io/file (System/getProperty "user.home") ".{{name}}-users.edn")]
     }

  #_{:component :authorizer
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.authorization/new-logged-in-authorizer
     }

  #_{:component :user-domain-seeder
     :library-dependencies [[cylon "0.5.0-20141014.130020-17"]]
     :constructor cylon.impl.user/new-user-domain-seeder
     :args [:users [{:id "dev" :password {{{dev-password}}} }]]
     :dev? true
     }

  #_{:component :modular.web-template/dependency-dynamic-template-model
     :library-dependencies [[juxt.modular/template "0.6.0"]
                            [de.ubercode.clostache/clostache "1.3.1"]]
     :constructor modular.web-template/new-dependency-dynamic-template-model
     }

  ;; Project-local components
  {:component :website
   :library-dependencies [[hiccup "1.0.5"]
                          [juxt.modular/bidi "0.5.4"]]
   :constructor {{name}}.website/new-website
   :using [:template-model]}

  #_{:component :{{name}}-cljs
     :library-dependencies [[juxt.modular/cljs "0.5.0"]]
     :constructor modular.cljs/new-cljs-module
     ;; TODO The args should belong to the instance
     :args [:name :{{name}} :mains ['{{name}}.main] :dependencies #{:cljs-core}]
     }

  #_{:component :example-page
     :constructor {{name}}.example-page/new-example-page
     ;; TODO The args should belong to the instance
     :args [:title "First example page"
            :content "Example page (A) generated by modular."
            :path "/example-page-a"
            ]}

  #_{:component :example-page-menu-items
     :constructor {{name}}.example-page/new-example-page-menu-items
     ;; TODO The args should belong to the instance
     :args [:label "First example page"
            :target :example-page-a]}

  #_{:component :example-page-b
     :constructor {{name}}.example-page/new-example-page
     :args [:title "Second example page"
            :content "Example page (B) generated by modular."
            :path "/example-page-b"]}

  #_{:component :example-page-b-menu-items
     :constructor {{name}}.example-page/new-example-page-menu-items
     :args [:label "Second example page"
            :target :example-page-b]}

  #_{:component :restricted-page
     :constructor {{name}}.restricted-page/new-restricted-page}
  ]

 :modules
 [
  ;; lein new modular app +httpkit
  ;; lein new modular app +httpkit:80 ; because there's only one possible option in this case
  ;; lein new modular app +httpkit:port:80

  ;; lein new modular app full-featured-website
  {:module :core              ; :core is special, it's always selected

   ;; temporary, while bidi is in checkouts, to allow for (reset)
   :library-dependencies [[ring-mock "0.1.5"]
                          [compojure "1.1.8"]]

   :files [{:template "project.clj" :target "project.clj"}
           {:template "system.clj" :target "src/{{sanitized}}/system.clj" :close-parens? true}
           {:template "main.clj" :target "src/{{sanitized}}/main.clj" :close-parens? true}
           {:template "dev.clj" :target "dev/dev.clj"}
           {:template "user.clj" :target "dev/user.clj"}]}

  {:module :component
   :library-dependencies [[com.stuartsierra/component "0.2.2"]]}

  {:module :co-dependency
   :library-dependencies [[malcolmsparks/co-dependency "0.1.5"]]}

  {:module :http-listener
   :components
   {:listener {:component :modular.http-kit/webserver}}}

  {:module :hello-world-website
   :components {:handler
                {:constructor {{name}}.hello-world-website/new-handler}}
   :dependencies {[:http-listener :listener] {:request-handler :handler}}
   :files [{:template "hello_world_website.clj"
            :target "src/{{sanitized}}/hello_world_website.clj"}]}

  {:module :modular-bidi-router
   :components {:webrouter
                {:component :modular.bidi/router}}
   :dependencies {[:http-listener :listener] {:request-handler :webrouter}}}

  {:module :simple-bidi-website
   :components {:website
                {:constructor {{name}}.simple-bidi-website/new-website}}
   :dependencies {[:modular-bidi-router :webrouter] [:website]}
   :files [{:template "simple_bidi_website.clj"
            :target "src/{{sanitized}}/simple_bidi_website.clj"}]}

  {:module :aggregate-template-model
   :components {:template-model
                {:component :modular.template/aggregate-template-model}}}

  {:module :logback-logging
   :library-dependencies [[org.clojure/tools.logging "0.2.6"]
                          [ch.qos.logback/logback-classic "1.0.7" :exclusions [org.slf4j/slf4j-api]]
                          [org.slf4j/jul-to-slf4j "1.7.2"]
                          [org.slf4j/jcl-over-slf4j "1.7.2"]
                          [org.slf4j/log4j-over-slf4j "1.7.2"]]
   :files [{:template "logback.xml" :target "resources/logback.xml"}]}

  {:module :clostache-templater
   :components {:templater
                {:component :modular.clostache/templater
                 }}}

  {:module :public-resources
   :components {:public-resources
                {:component :modular.bidi/static-resource-service
                 :args [:uri-context "\"/static\"" :resource-prefix "\"public\""]}}
   :dependencies {[:modular-bidi-router :webrouter] [:public-resources]}}

  {:module :templated-bidi-website
   :components {:website
                {:constructor {{name}}.templated-bidi-website/new-website
                 }

                #_:example-data
                #_{:component :modular.template/static-template-model
                   :args [:a "\"ABC\""]}
                }
   :dependencies {[:modular-bidi-router :webrouter] [:website]
                  :website {#_:aggregate-template-model #_[:aggregate-template-model :template-model]
                            :templater [:clostache-templater :templater]}
                  ;; [:aggregate-template-model :template-model] [:example-data]
                  }
   :library-dependencies [[hiccup "1.0.5"]]
   :files [{:template "templated_bidi_website.clj"
            :target "src/{{sanitized}}/templated_bidi_website.clj"}]}

  {:module :cover-website
   :components {:website
                {:constructor {{name}}.website/new-website}}
   :dependencies {[:modular-bidi-router :webrouter] [:website]
                  :website {:templater [:clostache-templater :templater]}}
   :co-dependencies {:website {:router [:modular-bidi-router :webrouter]}}
   :library-dependencies [[hiccup "1.0.5"]]
   :files [{:template "cover/website.clj"
            :target "src/{{sanitized}}/website.clj"}]}

  {:module :bootstrap-theme
   :files [{:template "page.html.mustache" :target "resources/templates/page.html.mustache"}
           {:file "resources/theme.css" :target "resources/public/theme.css"}]}

  {:module :bootstrap-cover
   :files [{:template "cover/page.html.mustache" :target "resources/templates/page.html.mustache"}
           {:template "cover/README.md" :target "README.md"}
           {:file "resources/cover.css" :target "resources/public/cover.css"}]}

  {:module :twitter-bootstrap
   :library-dependencies [[org.webjars/bootstrap "3.3.0"]]
   :components {:service
                {:component :modular.bidi/static-resource-service
                 :args [:uri-context "\"/bootstrap\"" :resource-prefix "\"META-INF/resources/webjars/bootstrap/3.3.0\""]}}
   :dependencies {[:modular-bidi-router :webrouter] {:twitter-bootstrap :service}}}

  {:module :jquery
   :library-dependencies [[org.webjars/jquery "2.1.0"]]
   :components {:service
                {:component :modular.bidi/static-resource-service
                 :args [:uri-context "\"/jquery\"" :resource-prefix "\"META-INF/resources/webjars/jquery/2.1.0\""]}}
   :dependencies {[:modular-bidi-router :webrouter] {:jquery :service}}}

  ;; TODO Add support for general webjars.org support in modular
  ;; How to?
  ;;

  #_{:module :example-pages
     :components #{:example-page-a
                   :example-page-a-menu-items
                   :example-page-b
                   :example-page-b-menu-items}
     :dependency-map {:webrouter [:example-page-a :example-page-b]
                      :example-page-a {:template-model :template-model}
                      :example-page-b {:template-model :template-model}
                      :menu-index [:example-page-a-menu-items
                                   :example-page-b-menu-items]}}

  #_{:module :webmeta
     :components #{:webmeta}
     :dependency-map {:template-model [:webmeta]}}

  #_{:module :cljs
     :components #{:cljs-builder :cljs-core :{{name}}-cljs}
     :dependency-map {:cljs-builder [:cljs-core :{{name}}-cljs]}}

  #_{:module :cylon/login
     :components #{:cylon/login-form
                   :login-form-menu-items
                   :cylon/login-form-bootstrap-renderer
                   :boilerplate
                   :cylon/atom-backed-session-store
                   :cylon/default-user-domain
                   :cylon/pbkdf2-password-hash
                   :cylon/user-file
                   :template-model
                   :user-domain-seeder}

     :dependency-map {:webrouter [:cylon/login-form]
                      :cylon/login-form
                      {:session-store :cylon/session-store
                       :user-domain :cylon/user-domain
                       :renderer :cylon/login-form-bootstrap-renderer
                       }
                      :cylon/login-form-bootstrap-renderer
                      {:boilerplate :boilerplate}
                      :boilerplate
                      {:template-model :template-model}
                      :cylon/user-domain
                      {:password-hash-algo :cylon/password-hash-algo
                       :user-store :cylon/user-store}
                      :menu-index [:login-form-menu-items]}
     :doc {:main #markdown "cylon-login.md"}}

  #_{:module :bootstrap
     :components #{:bootstrap-menu}
     :dependency-map {:bootstrap-menu {:menu-index :menu-index}
                      :template-model {:menu :bootstrap-menu}}}

  #_{:module :dev-browser
     :components #{}
     :dependency-map {}}]

 :application-templates
 {"hello-world-web" #{:component
                      :http-listener
                      :hello-world-website}

  "bidi-hello-world" #{:component
                       :http-listener
                       :modular-bidi-router
                       :simple-bidi-website}

  "templated-bidi-website" #{:component
                             :http-listener
                             :modular-bidi-router
                             :public-resources
                             :templated-bidi-website
                             :clostache-templater
                             #_:aggregate-template-model
                             :bootstrap-theme
                             :logback-logging
                             :twitter-bootstrap
                             :jquery}

  "bootstrap-cover" #{:component
                      :co-dependency
                      :logback-logging
                      :http-listener
                      :modular-bidi-router
                      :public-resources
                      :cover-website
                      :clostache-templater
                      :twitter-bootstrap
                      :jquery
                      :bootstrap-cover}

  ;; TODO Let's add some example pages

  ;; TODO Let's add some menu bars

  ;; TODO Let's add some co-dependencies (needs checkout)
  }

 }

;; TODO Show documentation, like this :-

;; lein new modular basic-website --help
